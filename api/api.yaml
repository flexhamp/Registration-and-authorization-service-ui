openapi: 3.0.1
info:
  title: API Documentation
  version: 1.0.0
paths:
  /prelogin:
    post:
      tags:
        - auth
      description: Авторизация / Регистрация
      operationId: prelogin
      requestBody:
        content:
          application/json:
            schema:
              required:
                - username
              type: object
              properties:
                username:
                  type: string
        required: true
      responses:
        200:
          description: Успешная авторизация
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PreLoginResponse'
        400:
          description: Некорректный запрос
        500:
          description: Внутренняя ошибка

  /login:
    post:
      tags:
        - auth
      description: Авторизация
      operationId: login
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
        required: true
      responses:
        200:
          description: Успешная авторизация
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IndividualDto'
        401:
          description: Неверные учетные данные или пользователь заблокирован
        403:
          description: Доступ запрещен
        424:
          description: Пользователь должен сбросить пароль перед входом в систему
        500:
          description: Внутренняя ошибка

  /preregister:
    post:
      tags:
        - auth
      operationId: preregister
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PreregisterRequest'
        required: true
      responses:
        200:
          description: Успешно выполнено
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IndividualDto'
        400:
          description: Некорректный запрос
        500:
          description: Внутренняя ошибка

  /confirmLogin:
    post:
      tags:
        - auth
      description: Подтверждение телефона / почты
      operationId: confirmLogin
      parameters:
        - name: login
          in: query
          required: true
          schema:
            type: string
        - name: otpCode
          in: query
          required: true
          schema:
            type: string
      responses:
        200:
          description: Успешная авторизация
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IndividualDto'
        401:
          description: Неверные отп-код
        403:
          description: Доступ запрещен
        400:
          description: Некорректный запрос
        500:
          description: Внутренняя ошибка

  /getOtpCode:
    get:
      tags:
        - auth
      operationId: getOtpCode
      parameters:
        - name: captchaResponse
          in: query
          required: true
          schema:
            type: string
        - name: login
          in: query
          required: true
          schema:
            type: string
      responses:
        200:
          description: Успешный запрос
          content:
            application/json:
              schema:
                type: integer
                format: int32
        400:
          description: Некорректный запрос
        401:
          description: Неверные секрет
        424:
          description: Ошибка при генерации ОТП-кода
        500:
          description: Внутренняя ошибка

  /registration:
    post:
      tags:
        - auth
      operationId: registration
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegistrationRequest'
        required: true
      responses:
        200:
          description: Новый пользователь зарегистрирован и авторизован
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IndividualDto'
        400:
          description: Имя пользователя занято
        500:
          description: Внутренняя ошибка

  /getIndividualInfo:
    get:
      tags:
        - personalInfo
      operationId: getIndividualInfo
      responses:
        200:
          description: Успешно выполнено
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IndividualDto'
        400:
          description: Некорректный запрос
        500:
          description: Внутренняя ошибка

  /suggest/fio:
    get:
      tags:
        - suggestions
      operationId: fioSuggest
      parameters:
        - name: userInput
          in: query
          required: true
          schema:
            type: string
        - name: part
          in: query
          required: true
          schema:
            $ref: '#/components/schemas/FioPart'
      responses:
        200:
          description: Успешно выполнено
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
        400:
          description: Некорректный запрос
        500:
          description: Внутренняя ошибка

components:
  schemas:
    Role:
      title: Role
      type: object
      properties:
        id:
          type: integer
          format: int32
        name:
          type: string
      required:
        - id
        - name

    BaseIndividual:
      title: BaseIndividual
      type: object
      properties:
        individualId:
          type: integer
          format: int64
        status:
          $ref: '#/components/schemas/Status'
        email:
          $ref: '#/components/schemas/Email'
        phone:
          $ref: '#/components/schemas/Phone'
        firstName:
          type: string
        lastName:
          type: string
        middleName:
          type: string
      required:
        - individualId
        - status

    IndividualDto:
      title: IndividualDto
      allOf:
        - $ref: '#/components/schemas/BaseIndividual'
        - type: object
          properties:
            address:
              $ref: '#/components/schemas/Address'
            birthDate:
              type: string
              format: date
            registrationDate:
              type: string
              format: date
            lastAauthDate:
              type: string
              format: date-time
            emails:
              type: array
              items:
                $ref: '#/components/schemas/Email'
            phones:
              type: array
              items:
                $ref: '#/components/schemas/Phone'
            lastModifiedDate:
              type: string
              format: date-time
            roles:
              type: array
              items:
                type: string

    Individual:
      title: Individual
      allOf:
        - $ref: '#/components/schemas/IndividualDto'
        - type: object
          properties:
            password:
              type: string

    Email:
      title: Email
      type: object
      properties:
        value:
          type: string
          maxLength: 320
        code:
          type: string
          minLength: 4
          maxLength: 6
        emailConfirm:
          type: boolean
        retry_count:
          type: integer
        retry_date:
          type: string
          format: date-time
        create_date:
          type: string
          format: date-time

    Phone:
      title: Email
      type: object
      properties:
        value:
          type: string
          pattern: ^7?\d{10}$
        code:
          type: string
          minLength: 4
          maxLength: 6
        phoneConfirm:
          type: boolean
        retry_count:
          type: integer
        retry_date:
          type: string
          format: date-time
        create_date:
          type: string
          format: date-time

    Address:
      title: Address
      type: object
      properties:
        address:
          type: string
        postalCode:
          type: string
        region:
          type: string
        city:
          type: string
        street:
          type: string
        house:
          type: string
        apartment:
          type: string

    PreLoginRequest:
      title: Prelogin
      type: object
      properties:
        usernameType:
          $ref: '#/components/schemas/LoginType'
        username:
          type: string
      required:
        - username
        - usernameType

    PreLoginResponse:
      title: PreLoginResponse
      type: string
      example: EXISTS
      enum: [ EXISTS, NOT_EXISTS ]

    LoginType:
      title: LoginType
      type: string
      example: PHONE
      enum: [ PHONE, EMAIL ]

    LoginRequest:
      title: LoginRequest
      type: object
      properties:
        username:
          description: Телефон или email
          type: string
          example: test@gmail.com / +7-913-755-46-44
        password:
          type: string
      required:
        - username
        - password

    AuthResponse:
      type: object
      properties:
        userId:
          type: integer
          format: int64
        status:
          $ref: '#/components/schemas/Status'
      required:
        - userId
        - status

    Status:
      description: Состояние регистрации (авторизации)
      type: string
      example: ENTER_PHONE
      enum:
        - NEW_PASSWORD
        - GET_OTP_EMAIL
        - CONFIRM_EMAIL
        - GET_OTP_PHONE
        - CONFIRM_PHONE
        - ENTER_INFO
        - WAITING
        - COMPLETED
        - UNKNOWN

    PreregisterRequest:
      title: RegistrationRequest
      type: object
      required:
        - username
        - password
      properties:
        username:
          description: Телефон или email
          type: string
          example: test@gmail.com / +7-913-755-46-44
        password:
          type: string
          minLength: 8

    PreregisterResponse:
      type: object
      properties:
        userId:
          type: string
        email:
          type: string
        phone:
          type: string
        status:
          $ref: '#/components/schemas/AuthResponse'
        firstName:
          type: string
        lastName:
          type: string
        middleName:
          type: string
        birthDate:
          type: string
          format: date-time
      required:
        - status

    RegistrationRequest:
      title: RegistrationRequest
      type: object
      required:
        - individualId
        - firstName
        - lastName
        - contact
      properties:
        individualId:
          type: integer
          format: int64
        contact:
          type: string
        firstName:
          type: string
        lastName:
          type: string
        middleName:
          type: string

    FioPart:
      type: string
      example: SURNAME
      enum: [ NAME, SURNAME, PATRONYMIC ]
